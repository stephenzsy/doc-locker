// source: file.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.doclocker.file.AwsS3FileDestination', null, global);
goog.exportSymbol('proto.doclocker.file.BeginUploadFileRequest', null, global);
goog.exportSymbol('proto.doclocker.file.BeginUploadFileResponse', null, global);
goog.exportSymbol('proto.doclocker.file.FileDestination', null, global);
goog.exportSymbol('proto.doclocker.file.FileDestination.DestinationCase', null, global);
goog.exportSymbol('proto.doclocker.file.FileMetadata', null, global);
goog.exportSymbol('proto.doclocker.file.UploadFileRequest', null, global);
goog.exportSymbol('proto.doclocker.file.UploadFileRequest.DataCase', null, global);
goog.exportSymbol('proto.doclocker.file.UploadFileResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.FileMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.doclocker.file.FileMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.FileMetadata.displayName = 'proto.doclocker.file.FileMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.AwsS3FileDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.doclocker.file.AwsS3FileDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.AwsS3FileDestination.displayName = 'proto.doclocker.file.AwsS3FileDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.FileDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.doclocker.file.FileDestination.oneofGroups_);
};
goog.inherits(proto.doclocker.file.FileDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.FileDestination.displayName = 'proto.doclocker.file.FileDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.UploadFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.doclocker.file.UploadFileRequest.oneofGroups_);
};
goog.inherits(proto.doclocker.file.UploadFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.UploadFileRequest.displayName = 'proto.doclocker.file.UploadFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.UploadFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.doclocker.file.UploadFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.UploadFileResponse.displayName = 'proto.doclocker.file.UploadFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.BeginUploadFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.doclocker.file.BeginUploadFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.BeginUploadFileRequest.displayName = 'proto.doclocker.file.BeginUploadFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.doclocker.file.BeginUploadFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.doclocker.file.BeginUploadFileResponse.repeatedFields_, null);
};
goog.inherits(proto.doclocker.file.BeginUploadFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.doclocker.file.BeginUploadFileResponse.displayName = 'proto.doclocker.file.BeginUploadFileResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.FileMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.FileMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.FileMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.FileMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.FileMetadata}
 */
proto.doclocker.file.FileMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.FileMetadata;
  return proto.doclocker.file.FileMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.FileMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.FileMetadata}
 */
proto.doclocker.file.FileMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.FileMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.FileMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.FileMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.FileMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.AwsS3FileDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.AwsS3FileDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.AwsS3FileDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bucketname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    prefix: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.AwsS3FileDestination}
 */
proto.doclocker.file.AwsS3FileDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.AwsS3FileDestination;
  return proto.doclocker.file.AwsS3FileDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.AwsS3FileDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.AwsS3FileDestination}
 */
proto.doclocker.file.AwsS3FileDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.AwsS3FileDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.AwsS3FileDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.AwsS3FileDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBucketname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.AwsS3FileDestination} returns this
 */
proto.doclocker.file.AwsS3FileDestination.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.AwsS3FileDestination} returns this
 */
proto.doclocker.file.AwsS3FileDestination.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bucketName = 3;
 * @return {string}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.getBucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.AwsS3FileDestination} returns this
 */
proto.doclocker.file.AwsS3FileDestination.prototype.setBucketname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string prefix = 4;
 * @return {string}
 */
proto.doclocker.file.AwsS3FileDestination.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.AwsS3FileDestination} returns this
 */
proto.doclocker.file.AwsS3FileDestination.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.doclocker.file.FileDestination.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.doclocker.file.FileDestination.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  AWS: 1
};

/**
 * @return {proto.doclocker.file.FileDestination.DestinationCase}
 */
proto.doclocker.file.FileDestination.prototype.getDestinationCase = function() {
  return /** @type {proto.doclocker.file.FileDestination.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.doclocker.file.FileDestination.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.FileDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.FileDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.FileDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.FileDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    aws: (f = msg.getAws()) && proto.doclocker.file.AwsS3FileDestination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.FileDestination}
 */
proto.doclocker.file.FileDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.FileDestination;
  return proto.doclocker.file.FileDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.FileDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.FileDestination}
 */
proto.doclocker.file.FileDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.doclocker.file.AwsS3FileDestination;
      reader.readMessage(value,proto.doclocker.file.AwsS3FileDestination.deserializeBinaryFromReader);
      msg.setAws(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.FileDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.FileDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.FileDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.FileDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAws();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.doclocker.file.AwsS3FileDestination.serializeBinaryToWriter
    );
  }
};


/**
 * optional AwsS3FileDestination aws = 1;
 * @return {?proto.doclocker.file.AwsS3FileDestination}
 */
proto.doclocker.file.FileDestination.prototype.getAws = function() {
  return /** @type{?proto.doclocker.file.AwsS3FileDestination} */ (
    jspb.Message.getWrapperField(this, proto.doclocker.file.AwsS3FileDestination, 1));
};


/**
 * @param {?proto.doclocker.file.AwsS3FileDestination|undefined} value
 * @return {!proto.doclocker.file.FileDestination} returns this
*/
proto.doclocker.file.FileDestination.prototype.setAws = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.doclocker.file.FileDestination.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.doclocker.file.FileDestination} returns this
 */
proto.doclocker.file.FileDestination.prototype.clearAws = function() {
  return this.setAws(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.doclocker.file.FileDestination.prototype.hasAws = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.doclocker.file.UploadFileRequest.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.doclocker.file.UploadFileRequest.DataCase = {
  DATA_NOT_SET: 0,
  CHUNK: 3,
  METADATA: 4
};

/**
 * @return {proto.doclocker.file.UploadFileRequest.DataCase}
 */
proto.doclocker.file.UploadFileRequest.prototype.getDataCase = function() {
  return /** @type {proto.doclocker.file.UploadFileRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.doclocker.file.UploadFileRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.UploadFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.UploadFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.UploadFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.UploadFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chunkoffset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunk: msg.getChunk_asB64(),
    metadata: (f = msg.getMetadata()) && proto.doclocker.file.FileMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.UploadFileRequest}
 */
proto.doclocker.file.UploadFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.UploadFileRequest;
  return proto.doclocker.file.UploadFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.UploadFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.UploadFileRequest}
 */
proto.doclocker.file.UploadFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunkoffset(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    case 4:
      var value = new proto.doclocker.file.FileMetadata;
      reader.readMessage(value,proto.doclocker.file.FileMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.UploadFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.UploadFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.UploadFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.UploadFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChunkoffset();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.doclocker.file.FileMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.doclocker.file.UploadFileRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
 */
proto.doclocker.file.UploadFileRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 chunkOffset = 2;
 * @return {number}
 */
proto.doclocker.file.UploadFileRequest.prototype.getChunkoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
 */
proto.doclocker.file.UploadFileRequest.prototype.setChunkoffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes chunk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.doclocker.file.UploadFileRequest.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes chunk = 3;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.doclocker.file.UploadFileRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.doclocker.file.UploadFileRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
 */
proto.doclocker.file.UploadFileRequest.prototype.setChunk = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.doclocker.file.UploadFileRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
 */
proto.doclocker.file.UploadFileRequest.prototype.clearChunk = function() {
  return jspb.Message.setOneofField(this, 3, proto.doclocker.file.UploadFileRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.doclocker.file.UploadFileRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FileMetadata metadata = 4;
 * @return {?proto.doclocker.file.FileMetadata}
 */
proto.doclocker.file.UploadFileRequest.prototype.getMetadata = function() {
  return /** @type{?proto.doclocker.file.FileMetadata} */ (
    jspb.Message.getWrapperField(this, proto.doclocker.file.FileMetadata, 4));
};


/**
 * @param {?proto.doclocker.file.FileMetadata|undefined} value
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
*/
proto.doclocker.file.UploadFileRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.doclocker.file.UploadFileRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.doclocker.file.UploadFileRequest} returns this
 */
proto.doclocker.file.UploadFileRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.doclocker.file.UploadFileRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.UploadFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.UploadFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.UploadFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.UploadFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.UploadFileResponse}
 */
proto.doclocker.file.UploadFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.UploadFileResponse;
  return proto.doclocker.file.UploadFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.UploadFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.UploadFileResponse}
 */
proto.doclocker.file.UploadFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.UploadFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.UploadFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.UploadFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.UploadFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.doclocker.file.UploadFileResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.UploadFileResponse} returns this
 */
proto.doclocker.file.UploadFileResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destinationName = 2;
 * @return {string}
 */
proto.doclocker.file.UploadFileResponse.prototype.getDestinationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.UploadFileResponse} returns this
 */
proto.doclocker.file.UploadFileResponse.prototype.setDestinationname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.BeginUploadFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.BeginUploadFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.BeginUploadFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.BeginUploadFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.BeginUploadFileRequest}
 */
proto.doclocker.file.BeginUploadFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.BeginUploadFileRequest;
  return proto.doclocker.file.BeginUploadFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.BeginUploadFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.BeginUploadFileRequest}
 */
proto.doclocker.file.BeginUploadFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.BeginUploadFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.BeginUploadFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.BeginUploadFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.BeginUploadFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.doclocker.file.BeginUploadFileResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.doclocker.file.BeginUploadFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.doclocker.file.BeginUploadFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.BeginUploadFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationsList: jspb.Message.toObjectList(msg.getDestinationsList(),
    proto.doclocker.file.FileDestination.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.doclocker.file.BeginUploadFileResponse}
 */
proto.doclocker.file.BeginUploadFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.doclocker.file.BeginUploadFileResponse;
  return proto.doclocker.file.BeginUploadFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.doclocker.file.BeginUploadFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.doclocker.file.BeginUploadFileResponse}
 */
proto.doclocker.file.BeginUploadFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.doclocker.file.FileDestination;
      reader.readMessage(value,proto.doclocker.file.FileDestination.deserializeBinaryFromReader);
      msg.addDestinations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.doclocker.file.BeginUploadFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.doclocker.file.BeginUploadFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.doclocker.file.BeginUploadFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.doclocker.file.FileDestination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.doclocker.file.BeginUploadFileResponse} returns this
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FileDestination destinations = 2;
 * @return {!Array<!proto.doclocker.file.FileDestination>}
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.getDestinationsList = function() {
  return /** @type{!Array<!proto.doclocker.file.FileDestination>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.doclocker.file.FileDestination, 2));
};


/**
 * @param {!Array<!proto.doclocker.file.FileDestination>} value
 * @return {!proto.doclocker.file.BeginUploadFileResponse} returns this
*/
proto.doclocker.file.BeginUploadFileResponse.prototype.setDestinationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.doclocker.file.FileDestination=} opt_value
 * @param {number=} opt_index
 * @return {!proto.doclocker.file.FileDestination}
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.addDestinations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.doclocker.file.FileDestination, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.doclocker.file.BeginUploadFileResponse} returns this
 */
proto.doclocker.file.BeginUploadFileResponse.prototype.clearDestinationsList = function() {
  return this.setDestinationsList([]);
};


goog.object.extend(exports, proto.doclocker.file);
